# f7 preview changes
# (local-set-key (kbd "<f7>") (lambda () (interactive) (async-shell-command (concat "open " (org-latex-export-to-pdf)))))

:ImportantShortcuts:
f7 preview changes
f8 commit each change
f9 push changes
:End:

* Header                                                      :do:not:ignore:
#+TITLE: Prolog Cheat Sheet
# SUBTITLE: Cheat Sheet Template
# DATE: << Winter 2019 >>
# When we don't provide a date, one is provided for us.
#+MACRO: URL https://github.com/alhassy/PrologCheatSheet
#+MACRO: ShowURL @@latex:{\tiny\hspace{6em}\url{ {{{URL}}} } }@@
#+AUTHOR: [[http://www.cas.mcmaster.ca/~alhassm/][Musa Al-hassy]] {{{ShowURL}}}
#+EMAIL: alhassy@gmail.com
#+DESCRIPTION: This document is written by Musa Al-hassy for his learning in the Winter of 2019.
#+STARTUP: hideblocks
#+STARTUP: overview
#+TODO: BEGIN-IGNORE(b) END-IGNORE(e) } | DONE(d)
#+OPTIONS: d:nil

#+INCLUDE: CheatSheet/CheatSheetSetup.org

#+PROPERTY: header-args :tangle "CheatSheet.pl" :comments link

#+TODO: TODO | spacing

* LaTeX Setup                                                :ignore:
# Can be obtained from: https://github.com/alhassy/MyUnicodeSymbols
#
#+LATEX_HEADER: \usepackage{/Users/musa/MyUnicodeSymbols/MyUnicodeSymbols}

#+NAME: parallel enviro
#+BEGIN_EXPORT latex
% \setlength{\columnseprule}{2pt}

\renewenvironment{parallel}[1][2] % one argument, whose default value is literal `2`.
 {
  \setlength{\columnseprule}{2pt}
  \begin{minipage}[t]{\linewidth} % width of minipage is 100% times of \linewidth
  \begin{multicols}{#1}  % default is `2`
 }
 {
 \setlength{\columnseprule}{0pt}
  \end{multicols}
  \end{minipage}
 }
#+END_EXPORT

# Removing the red box that appears in "minted" when using unicode.
# Src: https://tex.stackexchange.com/questions/343494/minted-red-box-around-greek-characters
#
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \AtBeginEnvironment{minted}{\dontdofcolorbox}
#+LATEX_HEADER: \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}}
#+LATEX_HEADER: \makeatother

* COMMENT Homemade Interactive Prolog Setup

In Prolog, one declares a relationship ~r(x0, x1, ‚Ä¶, xn)~ to be true for the declared
~xi~ ---with a change of perspective any of the ~xi~ can be considered ‚Äòinput‚Äô and the
rest considered ‚Äòoutput‚Äô.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package prolog)

;; Obtain ‚Äúswipl‚Äù interpreter.
(async-shell-command "brew install swi-prolog")

;; alhassy-air:~ musa$ swipl --version
;; SWI-Prolog version 8.0.2 for x86_64-darwin
#+END_SRC

The following did not work for me :'( ---so I made my own lolz.
#+BEGIN_SRC emacs-lisp :tangle no
(use-package ob-prolog)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((prolog . t)))

(use-package ediprolog)
#+END_SRC

Here's my current setup:
#+BEGIN_SRC emacs-lisp :tangle no
(local-set-key (kbd "<f6>") (lambda () (interactive)
  "
    org-babel-tangle the whole file, then execute the final query
    in the current SRC block.

    If the query mentions the variable ‚ÄòX‚Äô, then show all possible solutions
    followed by ‚Äòfalse‚Äô. Usually one presses ‚Äò;‚Äô to see other solutions,
    but in Emacs this only shows one futher solution then terminates.
    We get around this by executing essentially
    ‚Äúforall(your-query-with-X, writeln(X)).‚Äù
    This prints all solutions X to your query.

    If you want to use a variable but don't want to see all solutions,
    then avoid using ‚ÄòX‚Äô; e.g., use ‚ÄòY‚Äô ^_^.
  "
  (-let [kill-buffer-query-functions nil]
  (ignore-errors
     (switch-to-buffer "*Prolog*")
     (kill-buffer "*Prolog*"))

  ;; Get final query in current source block
  (search-forward "#+END_SRC")
  (search-backward "% ?-")
  ;; Copy line, without killing it.
  (setq xx (thing-at-point 'line t))

  (async-shell-command (format "swipl -s %s" (car (org-babel-tangle))) "*Prolog*")
  (other-window 1)

  ;; Paste the final query
  (setq xx (s-chop-prefix "% ?- " xx))
  (when (s-contains? "X" xx)
    (setq xx (concat "writeln(\"X =\"), forall(" (s-replace "." ", writeln(X))." xx))))

  (insert xx)
  (comint-send-input nil t) ;; Send it, i.e., ‚Äúpress enter at prompt‚Äù.

  ;; Insert query again, but do not send, in case user wishes to change it.
  (insert xx)
  (previous-line) (end-of-line)

)))
#+END_SRC

For example:
#+BEGIN_SRC prolog
magicNumber(7).
magicNumber(9).
magicNumber(42).

% ?- magicNumber(8).
% ?- magicNumber(X).
#+END_SRC

Press ~f6~ to obtain all solutions ~X~ to this query :grin:

Or
#+BEGIN_SRC prolog
main :- write('Hello, world!').

% ?- main.
#+END_SRC

This little setup has made exploring Prolog fun for me; hopefully it will make
Prolog fun for others üòÑ

:TODOS:
ToDo: Get the query, replace (,) with space, split to words, filter those
that start with a capital letter, these are the variables. Execute:
forall( (query) , ( write("Var0 = "), write(Var0), write(" "), write("Var1 = "), ‚Ä¶ ) ))
:END:

* Basics
/Everything is a relation!/ ---I.e., a table in a database!

\room
Whence programs are [[https://blog.algorexhealth.com/2018/11/a-practo-theoretical-introduction-to-logic-programming/][unidirectional]] and can be ‚Äòrun in reverse‚Äô:
Input arguments and output arguments are the same
thing! Only perspective shifts matter.

\room
For example, defining a relation ~plus(X, Y, Sum)~
/intended/ to be true precisely when ~Sum ‚âà X + Y~
gives us two other methods!
Subtract: ~plus(4, Y, 8)~ yields all solutions ~Y~ to
the problem ~8 = 4 + Y~.
Partitions: ~plus(X, Y, 8)~ yields all pairs ~X, Y~
that sum to 8.


Prolog is PROgramming in LOGic.

- Prolog is declarative: A program is a collection of ‚Äòaxioms‚Äô from which ‚Äòtheorems‚Äô
  can be proven. For example, consider how sorting is performed:

  + Procedurally: Find the minimum in the remainder of the list, swap it with the head
    of the list; repeat on the tail of the list.

  + Declaratively: ~B~ is the sorting of ~A~ /provided/ it is a permutation of ~A~ and it is
    ordered.

  Whence, a program is a theory and computation is deduction!

** COMMENT Adminstriva

 +  Write a prolog program as a text file with a .pl ending. For example, program.pl.

 +  Open SWI-Prolog by invoking swipl in the terminal.

 + In SWI-Prolog, type [program] to load the program, i.e. the file name in brackets, but without the ending.

 + In order to query the loaded program, type goals and watch the output.

 + To exit SWI-Prolog, type halt..

 Alternatively, you can also load the program by passing its name as a parameter to SWI-Prolog: swipl -s program.pl.

* Unification

# Prolog's execution model is based on 4 building blocks:
# Logical or, Logical and, term rewriting, and unification.

  + Unification :: Can the given terms be made to represent the same structure?
    - This is how type inference is made to work in all (?) languages.
  + Backtracking :: When a choice in unification causes it to fail, go back to the
    most recent choice point and select the next avialable choice.

\room
Unification:
  1. A constant unified only with itself.
  2. A variable unifies with anything.
  3. Two structures, terms, unify precisely when they have
     the same head and the same number of arguments,
     and the corresponding arguments unify recursively.

\room
Unification performs no simplification, whence no arithmetic.
This means, for example, we can form pairs by sticking an infix operator between two items; moreover we can form distinct kinds of pairs by using different operators:
#+BEGIN_SRC prolog :tangle no
?- C + "nice" = woah + Z.
C = woah,
Z = "nice".

% ‚Äò+‚Äô and ‚Äò/‚Äô are different, so no way to make these equal.
?- C + "nice" = woah / Z.
false.
#+END_SRC

** COMMENT Informally, in pseudo-Prolog:
#+BEGIN_SRC prolog :tangle no
unify(X, Y) :- X = Y.
unify(X, Y) :- nonvar(X), nonvar(Y), X = Y.
unify(F(X0, ‚Ä¶, XN), G(Y0, ‚Ä¶, YN)) :- F = G, X_i = Y_i.

% ?- unify(A, B). %‚áí true with A = B.
% ?- unify(1, 2). %‚áí false.

#+END_SRC

* Facts ---Nullary Relations

We declare relations by having them begin with a lowercase letter;
variables are distinguished by starting with a capital letter.

#+BEGIN_SRC prolog
jasim_is_nice.

% ?- jasim_is_nice. %‚áí true: We declared it so.

it_is_raining. /* Another fact of our world */

% ?- it_is_raining. %‚áí true

eats(fred, mangoes).
eats(bob, apples).
eats(fred, oranges).

% ?- eats(bob, apples). %‚áí true

% Which foods are eaten by fred?
% ?- eats(fred, what). %‚áí false; ‚Äòwhat‚Äô is name!
% ?- eats(fred, What). %‚áí mangoes oranges
#+END_SRC

Here's a cute one:
#+BEGIN_SRC prolog
% All men are mortal.
mortal(X) :- man(X).

% Socrates is a man.
man(socrates).

% Hence, he's expected to be mortal.
% ?- mortal(socrates). %‚áí true

% What about Plato?
% ?- mortal(plato). %‚áí false, plato's not a man.

% Let's fix that.
man(plato).

% Who is mortal?
% ?- mortal(X). % ‚áí socrates plato
#+END_SRC

* Hidden Quantifiers

#+BEGIN_SRC prolog :tangle no
head(X) :- body(X,Y).
% Semantics: ‚àÄ X. head(X) ‚áê ‚àÉ Y. body(X,Y).
#+END_SRC
Queries are treated as headless clauses.
#+BEGIN_SRC prolog :tangle no
?- Q(X)
% Semantics: ‚àÉ X. Q(X).
#+END_SRC

* Conjunction

+ Conjunction: ~p(X), q(X)~ means ‚Äúlet ~X~ be /a/ solution to ~p~, then use it in query ~q~.‚Äù

+ Operational semantics: Let ~X~ be the first solution declared, found, for ~p~,
    then try ~q~; if it fails, then /backtrack/ and pick the next declared solution to ~p~,
    if any, and repeat until ~q~ succeeds.

+ For example, ~p(X), print(X), fail.~ gets a solution to ~p~, prints it, then fails
    thereby necessitating a backtrack to obtain a different solution ~X~ for ~p~, then
    repeats. In essence, this is prints all solutions to ~p~
    ---a so-called ‚Äúfail driven loop‚Äù.

For example,
#+BEGIN_SRC prolog
yum(pie).
yum(apples).
yum(maths).

% ?- yum(Y), writeln(Y), fail. %‚áí pie apples maths false.
#+END_SRC

* Disjunction

  Since a Prolog program is the conjunction of all its clauses:

#+BEGIN_SRC prolog :tangle no
% (head ‚áê body‚ÇÅ) ‚àß (head ‚áê body‚ÇÇ)
head :- body‚ÇÅ.
head :- body‚ÇÇ.

‚âÖ

% head  ‚áê  body‚ÇÅ ‚à® body‚ÇÇ
head :- body‚ÇÅ ; body‚ÇÇ.
#+END_SRC

* Arithmetic with ~is~

  + Unification only tries to make both sides of an equality true by binding free
    variables to expressions. It does not do any arithmetic.

  + Use ~is~ to perform arithmetic.

#+BEGIN_SRC prolog
% ?- X = 3 + 2.  %% X = 3 + 2
% ?- X is 3 + 2. %% X = 5
#+END_SRC

* Declaration Ordering Matters

When forming a recursive relation, ensure the base case, the terminating portion,
  is declared before any portions that require recursion. Otherwise the program may
  loop forever.

\room
Unification is performed using depth-first search using the order of the declared
  relationships. For example, the following works:

#+BEGIN_SRC prolog
% Graph
edge(a, b). edge(b ,c). edge(c, d).

% Works
path(X, X).
path(X, Y) :- edge(Z, Y), path(X, Z).
% ?- path(a, d). %‚áí true.

% Fails: To find a path, we have to find a path, before an edge!
% The recursive clause is first and so considerd before the base clause!
path_(X, Y) :- path_(X, Z), edge(Z, Y).
path_(X, X).
% ?- path_(a, d). %‚áí loops forever!
#+END_SRC

* Cuts

  + Ensure deterministic behaviour:
    Discard choice points of a ancestor frames.

  +  ~p(X, a), !~ only produces one answer to ~X~:
    Do not search for additional solutions once /a/ solution has been found to ~p~.

    E.g., only one ~X~ solves the problem and trying to
    find another leads to infinite search ---‚Äúgreen cut‚Äù---
    or unintended candidate results ---‚Äúred cut‚Äù.

* ADT: Pairs, Numbers, Lists, and Trees

+ Uniform treatment of all datatypes as predicates!

#+BEGIN_SRC prolog
% In Haskell: Pair a b = MkPair a b

pair(_, _).

% ?- pair(1, "nice").
% ?- pair(1, "nice") = pair(A, "nice"). %‚áí A = 1

% In Haskell: Nat = Zero | Succ Nat

nat(zero).
nat(succ(N)) :- nat(N).

% ?- nat(succ(succ(zero))).

sum(zero, N, N).
sum(succ(M), N, succ(S)) :- sum(M, N, S).

% ?- Two = succ(succ(zero)), Four = succ(succ(succ(succ(zero)))), sum(Two, Two, Four).
#+END_SRC

#+BEGIN_SRC prolog
% In Haskell: Tree a = Leaf a | Branch (Tree a) (Tree a)

tree(leaf(_)).
tree(branch(L, R)) :- tree(L), tree(R).

% ?- A = leaf(1), B = leaf(2), L = branch(A, B), R = branch(A, A), tree(branch(L, R)).

#+END_SRC

Programming via specification: Lisp lists, for example, are defined by the following
equations.
#+BEGIN_SRC prolog
% Head: (car (cons X Xs)) = X
% Tail: (cdr (cons X Xs)) = Xs
% Extensionality: (cons (car Xs) (cdr Xs)) = Xs, for non-null Xs.

% We can just write the spec up to produce the datatype!
% We simply transform /functions/ car and cdr into relations;
% leaving the constructor, cons, alone.

% What are lists?
list(nil).
list(cons(_, Xs)) :- list(Xs).

null(nil).

car(cons(X, Xs), X) :- list(Xs).
cdr(cons(_, Xs), Xs) :- list(Xs).

% ?- true.
% - list(Ys), not(null(L)), list(cons(car(Ys, Y), cdr(Ys, L))). % loops.

% ?- [1] = [1|[]].
#+END_SRC

* Built-in Lists

Lists are enclosed in brackets, separated by commas,
and constructed out of cons ‚Äú|‚Äù.
#+BEGIN_SRC prolog
% ?- ["one", two, 3] = [Head|Tail].
#+END_SRC

See [[http://www.swi-prolog.org/pldoc/man?section=lists][here]] for the list library, which includes:
#+BEGIN_SRC prolog
member(element, list)
append(list1, list2, lists12)
prefix(part, whole)
nth0(index, list, element)
last(list, element)
length(list, number)
reverse(list1, list2)
permutation(list1, list2)
sum_list(list, number)
max_list(list, number)
is_set(list_maybe_no_duplicates)
#+END_SRC

* Higher-order

+ Prolog is limited to first-order logic: We cannot bind variables to relations.
+ Prolog /indirectly/ supports higher-order rules.

#+BEGIN_SRC prolog
colour(bike, red).
colour(chair, blue).

% Crashes!
% is_red(C, X, Y) :- C(X, Y)

% Works
is_red(C, X, Y) :- call(C, X, Y).

% ?- is_red(colour, bike, X). %‚áí X = red.
#+END_SRC

* ~Print, var, nonvar~
~Print~ predicate always succeeds, never binds any variables, and prints out its
parameter as a side effect.

\room
Use built-ins ~var~ and ~nonvar~ to check if a variable is free or bound.
#+BEGIN_SRC prolog
% ?- var(Y).  %‚áí true
% ?- Y = 2, var(Y). %‚áí false
% ?- Y = 2, nonvar(Y). %‚áí true
#+END_SRC

* spacing newpage :ignore:
  # \newpage
  \vfill
* Reads
  Organised in terms of length:
+ [[https://www.matchilling.com/introduction-to-logic-programming-with-prolog/][Introduction to logic programming with Prolog]] ---12 minute read.
+ [[http://www.doc.gold.ac.uk/~mas02gw/prolog_tutorial/prologpages/index.html#menu][Introduction to Prolog]] ---with interactive quizzes
+ [[https://www.youtube.com/watch?v=SykxWpFwMGs][Derek Banas' Prolog Tutorial]]  ---1 hour video
+ [[https://blog.algorexhealth.com/2018/11/a-practo-theoretical-introduction-to-logic-programming/][A Practo-Theoretical Introduction to Logic Programming]]  ---a *colourful* read showing Prolog ‚âÖ SQL.
+ [[https://en.wikibooks.org/wiki/Prolog][Prolog Wikibook]] ---slow-paced and cute
+ [[http://www.cs.nuim.ie/~jpower/Courses/Previous/PROLOG/][James Power's Prolog Tutorials]]
+ [[https://www3.risc.jku.at/education/courses/ws2009/logic-programming/][Introduction to Logic Programming]] ---course notes and more!
+ [[https://stackoverflow.com/questions/tagged/prolog][Stackoverflow Prolog Questions]]  ---nifty FAQ stuff
+ [[https://sites.google.com/site/prologsite/prolog-problems][99 Prolog Problems]]   ---with solutions
+ [[https://www.cis.upenn.edu/~matuszek/cit594-2012/Pages/backtracking.html][Backtracking]]
+ [[http://web.engr.oregonstate.edu/~erwig/papers/Zurg_JFP04.pdf][Escape from Zurg: An Exercise in Logic Programming]]
+ [[https://pdfs.semanticscholar.org/57d3/1ca47fa9688089b9b7e7c19c199aa03aff1e.pdf][Use of Prolog for developing a new programming language]] ---Erlang!
+ [[https://www.cpp.edu/~jrfisher/www/prolog_tutorial/pt_framer.html][prolog :- tutorial]] ---Example oriented
+ [[http://www.learnprolognow.org/][Learn Prolog Now!]]  ---thorough, from basics to advanced
+ [[http://www.pathwayslms.com/swipltuts/index.html][Real World Programming in SWI-Prolog]]
# + https://learnxinyminutes.com/docs/prolog/
# + [[http://faculty.nps.edu/ncrowe/book/chap14.html][Prolog's Logical Limitations]]

# Prolog versus you, https://www.springer.com/gp/book/9783540175773

# Chapter 2, problem-oriented
# http://www.anclp.pl/download/AN_CLP.pdf

* COMMENT Making README.md

C-c C-c: Evaluate src block.

#+NAME: make-readme
#+BEGIN_SRC elisp :results none
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.md
     ,#+HTML: <h1> PrologCheatSheet </h1>
     ,#+OPTIONS: toc:nil d:nil
     # Toc is displayed below at a strategic position.

    Basics of relational programming with Prolog
    ---PROgramming in LOGic
    ^_^

    [[https://swish.swi-prolog.org/p/algorex_prolog.pl][Try Prolog online]]

     ,*The listing sheet, as PDF, can be found
     [here]({{{URL}}}/blob/master/CheatSheet.pdf)*,
     while below is an unruly html rendition.

     This reference sheet is built around the system
     https://github.com/alhassy/CheatSheet.

     ,#+TOC: headlines 2
     ,#+INCLUDE: CheatSheet.org
    ")
    (org-mode)
    (org-md-export-to-markdown)
)
#+END_SRC

* COMMENT footer

# Local Variables:
# eval: (org-babel-tangle)
# eval: (progn (org-babel-goto-named-src-block "make-readme") (org-babel-execute-src-block) (outline-hide-sublevels 1))
# eval: (load-file "CheatSheet.el")
# compile-command: (org-latex-export-to-pdf)
# End:
